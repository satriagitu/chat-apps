// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "chat-apps/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ConversationRepository is an autogenerated mock type for the ConversationRepository type
type ConversationRepository struct {
	mock.Mock
}

// CreateConversation provides a mock function with given fields: participants
func (_m *ConversationRepository) CreateConversation(participants []int) (domain.ConversationResponse, error) {
	ret := _m.Called(participants)

	if len(ret) == 0 {
		panic("no return value specified for CreateConversation")
	}

	var r0 domain.ConversationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]int) (domain.ConversationResponse, error)); ok {
		return rf(participants)
	}
	if rf, ok := ret.Get(0).(func([]int) domain.ConversationResponse); ok {
		r0 = rf(participants)
	} else {
		r0 = ret.Get(0).(domain.ConversationResponse)
	}

	if rf, ok := ret.Get(1).(func([]int) error); ok {
		r1 = rf(participants)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConversationByID provides a mock function with given fields: id
func (_m *ConversationRepository) GetConversationByID(id int) (domain.ConversationResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetConversationByID")
	}

	var r0 domain.ConversationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.ConversationResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.ConversationResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.ConversationResponse)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConversationRepository creates a new instance of ConversationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConversationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConversationRepository {
	mock := &ConversationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
