// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "chat-apps/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JobRepository is an autogenerated mock type for the JobRepository type
type JobRepository struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: job
func (_m *JobRepository) CreateJob(job domain.Job) (domain.Job, error) {
	ret := _m.Called(job)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Job) (domain.Job, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(domain.Job) domain.Job); ok {
		r0 = rf(job)
	} else {
		r0 = ret.Get(0).(domain.Job)
	}

	if rf, ok := ret.Get(1).(func(domain.Job) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobByID provides a mock function with given fields: id
func (_m *JobRepository) GetJobByID(id int) (domain.Job, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetJobByID")
	}

	var r0 domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Job, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Job); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Job)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobStatus provides a mock function with given fields: id, status, completedAt
func (_m *JobRepository) UpdateJobStatus(id int, status string, completedAt time.Time) error {
	ret := _m.Called(id, status, completedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, time.Time) error); ok {
		r0 = rf(id, status, completedAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJobRepository creates a new instance of JobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobRepository {
	mock := &JobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
