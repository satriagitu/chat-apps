// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "chat-apps/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// CreateNotification provides a mock function with given fields: notification
func (_m *NotificationRepository) CreateNotification(notification domain.Notification) (domain.Notification, error) {
	ret := _m.Called(notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Notification) (domain.Notification, error)); ok {
		return rf(notification)
	}
	if rf, ok := ret.Get(0).(func(domain.Notification) domain.Notification); ok {
		r0 = rf(notification)
	} else {
		r0 = ret.Get(0).(domain.Notification)
	}

	if rf, ok := ret.Get(1).(func(domain.Notification) error); ok {
		r1 = rf(notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationsByUserID provides a mock function with given fields: userID
func (_m *NotificationRepository) GetNotificationsByUserID(userID int) ([]domain.Notification, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationsByUserID")
	}

	var r0 []domain.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Notification, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Notification); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
