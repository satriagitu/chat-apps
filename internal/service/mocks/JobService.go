// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "chat-apps/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// JobService is an autogenerated mock type for the JobService type
type JobService struct {
	mock.Mock
}

// GetJobStatus provides a mock function with given fields: id
func (_m *JobService) GetJobStatus(id int) (domain.Job, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetJobStatus")
	}

	var r0 domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Job, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Job); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Job)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueueBroadcastNotification provides a mock function with given fields: message
func (_m *JobService) QueueBroadcastNotification(message string) (domain.Job, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for QueueBroadcastNotification")
	}

	var r0 domain.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Job, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Job); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Get(0).(domain.Job)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJobService creates a new instance of JobService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJobService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JobService {
	mock := &JobService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
