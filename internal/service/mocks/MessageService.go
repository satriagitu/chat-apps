// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "chat-apps/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: conversationID, senderID, content
func (_m *MessageService) CreateMessage(conversationID int, senderID int, content string) (domain.Message, error) {
	ret := _m.Called(conversationID, senderID, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) (domain.Message, error)); ok {
		return rf(conversationID, senderID, content)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) domain.Message); ok {
		r0 = rf(conversationID, senderID, content)
	} else {
		r0 = ret.Get(0).(domain.Message)
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(conversationID, senderID, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesByConversationID provides a mock function with given fields: conversationID
func (_m *MessageService) GetMessagesByConversationID(conversationID int) ([]domain.Message, error) {
	ret := _m.Called(conversationID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesByConversationID")
	}

	var r0 []domain.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Message, error)); ok {
		return rf(conversationID)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Message); ok {
		r0 = rf(conversationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(conversationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessageService creates a new instance of MessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageService {
	mock := &MessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
